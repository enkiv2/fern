#!/usr/bin/env python
# -*- coding: utf-8 -*-

##################### IMPORTS, POLYFILLS, AND SHIMS
import sys, curses, time, os, copy, traceback, re, locale, codecs, subprocess
try:
	reload(sys)
	sys.setdefaultencoding('utf8')
except: pass
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
code = locale.getpreferredencoding()
code="UTF-8"
UTF8Writer = codecs.getwriter('utf8')
sys.stdout = UTF8Writer(sys.stdout)

try:
	subprocessRun=subprocess.run
except AttributeError:
	import shlex, tempfile
	def subprocessRun(args, input=None):
		if input != None:
			tmp=tempfile.NamedTemporaryFile()
			tmp.write(str(input))
			input=open(tmp.name, 'r')
			tmp.close()
		return subprocess.call(shlex.split(args), stdin=input)
try:
	import cPickle
	pickle=cPickle
except: import pickle

try:
	from xdg import (XDG_CACHE_HOME, XDG_CONFIG_DIRS, XDG_CONFIG_HOME, XDG_DATA_DIRS, XDG_DATA_HOME, XDG_RUNTIME_DIR)
	ferndir = os.path.join(XDG_CONFIG_HOME, "fern")
except:
	home = ""
	try:
		from pathlib import Path
		home = str(Path.home())
	except: home = os.path.expanduser("~")
	ferndir = home + "/.fern/"

try: from html import unescape
except:
	try:
		from HTMLParser import HTMLParser
		unescape=HTMLParser().unescape
	except:
		from html.parser import HTMLParser
		unescape=HTMLParser().unescape

from datetime import datetime
from mastodon import Mastodon

###################### GLOBALS
logo="""
                           
   :##  Ｆｅｄｅｒａｔｅｄ
   #. Ｅｄｉｔｏｒ  ａｎｄ 
   # Ｒｅａｄｅｒ  ｏｆ  Ｎｅｗｓ
 #####   ###    #:##: #:##: 
   #       :#   ##  # #  :#   /.\\
   #    #   #   #     #   #  // \\\\
   #    #####   #     #   #  \\\\///
   #    #       #     #   #   \//
   #        #   #     #   # -=//=-
   #     ###:   #     #   #-=//==-
                            
"""

(ROWS, COLS)=(25,80)

seen_toots=[]
tb_dirty=[False]*100
(tootbase,acctbase)=({},{})
myAccountId=""

(hlcolor, normcolor, cwcolor, textcolor, menucolor, seencolor) = map(lambda x: [x, curses.COLOR_BLACK], 
		[curses.COLOR_MAGENTA, curses.COLOR_WHITE, curses.COLOR_RED, curses.COLOR_WHITE, curses.COLOR_GREEN, curses.COLOR_BLUE])
(hlnum, normnum, cwnum, textnum, menunum, seennum) = range(1, 7)

######################## CURSES HELPERS & WIZARDS
def box(offy, offx, msg):
	popup=curses.newwin(offy, offx, int(ROWS/2)-int(offy/2), int(COLS/2)-int(offx/2))
	popup.box()
	popup.addstr(1, 1, msg)
	popup.overlay(scr)
	scr.refresh();popup.refresh()
	return popup

def statusMsg(msg, wait=True):
	popup=box(4, 80, msg)
	if wait: popup.getch()
	del popup

def queryForInput(msg, hideEcho=False):
	(offy, offx)=(10, 100)
	if COLS<100: offx=COLS
	if ROWS<10: offy=ROWS
	popup=box(offy, offx, msg)
	if not hideEcho: curses.echo()
	curses.curs_set(1)
	macguffin=popup.getstr(2, 1, 500)
	curses.curs_set(0);curses.noecho()
	del popup
	scr.refresh()
	try: macguffin=macguffin.decode(code)
	except: pass
	return macguffin.replace("\\n", "\n")

def registerApplication(instanceURL, email, password):
	clientCredFname=ferndir+"clientcred.txt"
	userCredFname=ferndir+"usercred.txt"
	
	if not (os.path.exists(clientCredFname)): Mastodon.create_app("fern", to_file=clientCredFname, api_base_url=instanceURL)
	
	mastodon = Mastodon(client_id=clientCredFname, api_base_url=instanceURL)
	mastodon.log_in(email, password, to_file=userCredFname)
	with open(ferndir+"instance_url.txt", "w") as f: f.write(instanceURL)

def registerApplicationHelper():	
	statusMsg("You need to set up Fern to talk to your instance. Press any key to continue.")
	instanceURL=queryForInput("What is the URL of your instance?")
	email=queryForInput("What is your email?")
	password=queryForInput("What is your password?", True)
	try: registerApplication(instanceURL, email, password)
	except Exception as e:
		statusMsg("Something went wrong: "+str(e))
		raise e

def setupColor():
	curses.start_color()
	curses.init_pair(*([hlnum]+hlcolor))	 # Highlighted message frame
	curses.init_pair(*([normnum]+normcolor))	 # Normal message frame
	curses.init_pair(*([cwnum]+cwcolor))	 # CW text
	curses.init_pair(*([textnum]+textcolor))	 # Normal text
	curses.init_pair(*([menunum]+menucolor))	 # Menu
	curses.init_pair(*([seennum]+seencolor))	 # Already-seen messages

def drawLogo(xoffset=0, yoffset=0):
		i=0
		for line in logo.split("\n"):
			scr.addstr(int(i+yoffset), int(xoffset), line, curses.color_pair(menunum))
			i+=1
		scr.refresh()

def setupCurses():
	global scr, ROWS, COLS
	scr = curses.initscr()
	setupColor()
	curses.cbreak();curses.noecho();curses.curs_set(0);scr.keypad(1)
	ROWS, COLS = scr.getmaxyx()
	scr.clear()
	drawLogo()

def teardownCurses():
	curses.nocbreak();scr.keypad(0);curses.echo()
	curses.endwin()

######################### TEXT FORMATTING & PROCESSING HELPERS

def trunc(string, length, affix="...", breakOnWord=False):
	if not string: return ""
	if len(string)<length: return string
	if length==0: return ""
	if len(affix)>length: return string[:length]
	if breakOnWord:
		words=string.split()
		for i in range(len(words), 1, -1):
			x=" ".join(words[:i]+[affix])
			if len(x)<length: return x
		return trunc(string, length, affix)
	else: return string[:length-len(affix)]+affix

def truncWrap(string, length, affix="\n", breakOnWord=True):
	ret=[]
	while len(string)>length:
		ret.append(trunc(string, length, affix, breakOnWord))
		string=string[len(ret[-1])-(len(affix)):]
	return ret+[string]
def truncWrapMulti(strings, length):
	ret=[]
	for string in strings:
		ret.extend(truncWrap(string, length))
		ret.extend("")
	return ret
def firstNonBlankLine(string):
	lines=string.split("\n")
	for line in lines:
		if len(line)>0:
			return line
def centerPad(string, length, padding=" "):
	string=trunc(string, length, breakOnWord=True)
	pad=length-len(string)
	if pad>0 and (pad/2)>0 and ((pad/2)/len(padding))>0:
		padstr=padding*int((pad/2)/len(padding))
		return padstr+string+padstr
	return string

def processContents(string):
	string=string.replace("<p>", "\n").replace("</p>", "\n").replace("<br>", "\n").replace("<br />", "\n").replace("<p />", "\n")
	string=re.sub("<[^>]*>", "", string)
	string=unescape(string)
	return string

def fillInDomain(name):
	if name.find("@")<0: return name+"@"+domain
	return name

def applyCWRules(username, content, cw):
	global cwrules
	if not cw: cw=""
	for rule in cwrules:
		crule=re.compile(rule, re.I|re.M|re.U)
		if crule.match(username)!=None: cw+=" "+cwrules[rule]
		if crule.match(content)!=None: cw+=" "+cwrules[rule]
	cw=cw.strip()
	if not cw: return None
	return cw

######################## CODE FOR DRAWING THE TUI

def drawPanels(uid, rows, cols, highlighted=0):
	(hlColor, color)=(curses.color_pair(hlnum), curses.color_pair(normnum))
	leftPanelCols=int((cols/8.0)*3)
	rightPanelCols=cols-leftPanelCols
	truncID=trunc(uid, leftPanelCols-3)
	scr.addstr("".join(["+[", truncID, "]", "-"*(leftPanelCols-(3+len(truncID))), "+", "-"*(rightPanelCols-1)]))
	for i in range(0, int((rows-3)/4)):
		bottom="/"
		if i<10: bottom=str(i)
		if highlighted==i:
			for j in range(0,3): scr.addstr("".join(["#", " "*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
			scr.addstr("".join(["#", "="*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
		else:
			for j in range(0,3): scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["+", "_"*(leftPanelCols-1), bottom, " "*(rightPanelCols-1)]), color)
	if (rows-3)%4>0:
		for i in range(4*int((rows-3)/4), rows-3): scr.addstr(" "*cols)
	clopen="[(o)pen_CW]"
	if isCWOpen: clopen="[cl(o)se_CW]"
	scr.addstr(centerPad("[(p)rev/(n)ext_unread] [(P)rev/(N)ext_message] [(O)pen_last_unread] [(j)ump_to_timeline] [(T)op] [(c)ompose] [(q)uit]", cols-1).replace("_", " "), curses.color_pair(menunum))
	scr.addstr(centerPad("[(b)oost] [(f)av] [mark_(u)nread] "+clopen+" [(t)hread_view] [(F)etch_new] [view_in_pa(g)er] [(:)_command] [(/)_find]", cols-1).replace("_", " "), curses.color_pair(menunum))
	if COLS-(leftPanelCols+(COLS-leftPanelCols/2)) > 43: drawLogo(leftPanelCols+int((COLS-leftPanelCols)/2), int(ROWS/2))

def drawMsgPanel(idx, user, cw, msg, date, seen=False):
	panelstart=(idx*4)+1
	if panelstart+4 > ROWS-2: return
	panelwidth=int((COLS/8.0)*3)-1
	(mcol, tcol)=(curses.color_pair(menunum), curses.color_pair(textnum))
	if(seen):
		(mcol, tcol)=[curses.color_pair(seennum)]*2
	scr.addstr(panelstart, 1, trunc(user, panelwidth), mcol)
	if not cw: scr.addstr(panelstart+1, 2, trunc(firstNonBlankLine(msg), panelwidth-2), tcol)
	else: scr.addstr(panelstart+1, 2, trunc(cw, panelwidth-2), curses.color_pair(cwnum))
	scr.addstr(panelstart+2, 2, trunc(date, panelwidth-2), mcol)

def drawSelectedMsg(user, displayname, cw, msg, cwopen=False):
	panelstart=int((COLS/8.0)*3)+3
	panelwidth=COLS-panelstart-1
	msg=truncWrapMulti(msg.split("\n"), panelwidth)
	scr.addstr(1, panelstart, trunc(displayname, panelwidth), curses.color_pair(menunum))
	scr.addstr(2, panelstart, "("+trunc(user, panelwidth-2)+")", curses.color_pair(menunum))
	if not cw:
		i=3
		for line in msg:
			if i>ROWS: return
			scr.addstr(i, panelstart, line, curses.color_pair(textnum))
			i+=1
	else:
		i=3
		for line in truncWrap("CW: "+cw, panelwidth):
			if i>ROWS: return
			scr.addstr(i, panelstart, line, curses.color_pair(cwnum))
			i+=1
		if cwopen:
			for line in msg:
				if i>ROWS: return
				scr.addstr(i, panelstart, line, curses.color_pair(textnum))
				i+=1

def drawPanelContents(toots, selectedIdx, skipSeen=False):	
	global isCWOpen
	scr.clear()
	drawPanels(fillInDomain(mastodon.account_verify_credentials()["acct"]), ROWS, COLS, selectedIdx)
	i=0
	for toot in toots:
		if(i>(ROWS-3)/4): continue
		if toot==None:
			drawMsgPanel(i, "", "", "MESSAGE UNAVAILABLE", "", True)
			if i==selectedIdx:
				drawSelectedMsg("", "", "", "MESSAGE UNAVAILABLE", True)
		else: 
			if "reblog" in toot and toot["reblog"] and type(toot["reblog"])==type(toot): toot=toot["reblog"]
			if "muted" in toot or not "id" in toot: next
			tid=gTid(toot)
			if not tid in tootbase: tootbase[tid]=copy.deepcopy(toot)
			seen=(tid in seen_toots)
			if skipSeen and seen: next
			acct=toot["account"]
			username=fillInDomain(acct["acct"])
			content=processContents(toot["content"])
			cw=applyCWRules(username, content, toot["spoiler_text"])
			drawMsgPanel(i, username, cw, content, str(toot["created_at"]), seen)
			if i==selectedIdx:
				if not seen:
					seen_toots.append(tid)
				if "media_attachments" in toot:
					for attachment in toot["media_attachments"]:
						content+="\n"+attachment["url"]
				flags=""
				if "in_reply_to_id" in toot and toot["in_reply_to_id"]: flags+="["+str(toot["in_reply_to_id"])+"<-]"
				if toot["reblogged"]: flags+="[b]"
				if toot["favourited"]: flags+="[f]"
				if toot["sensitive"]: flags+="[sensitive]"
				if "visibility" in toot: flags+="["+toot["visibility"]+"]"
				if "mentions" in toot and toot["mentions"]:
					if len(flags)>0: flags+="\n"
					flags+="TO: "
					for mention in toot["mentions"]: flags+=fillInDomain(mention["acct"])+" "
					flags+="\n"
				content=flags+content
				if "tags" in toot and toot["tags"]:
					tags=[]
					for tag in toot["tags"]: tags.append(tag["name"])
					content+="\n\nTAGS: "+(" ".join(tags))
				drawSelectedMsg(username, acct["display_name"], cw, content, isCWOpen)
		i+=1
	scr.refresh()

def conditionalErrMsg(default_msg, verbose=False, wait=False, msg=None, suffix=None, err=None, prefix="Error"):
	if err:
		if suffix:
			suffix=str(suffix)+": "
		else:
			suffix=""
		suffix+=str(err)
	conditionalStatusMsg(default_msg, verbose, wait, msg, prefix, suffix)

def conditionalStatusMsg(default_msg, verbose=False, wait=False, msg=None, prefix=None, suffix=None):
	if verbose:
		myMsg=default_msg
		if msg:
			myMsg=msg
		if prefix:
			myMsg=prefix+" "+myMsg
		if suffix:
			myMsg+=" "+suffix
		statusMsg(myMsg, wait)

def prettyProfile(acct):
	locked="[unlocked]"
	if acct["locked"]:
		locked="[ locked ]"
	discoverable="[vis:yes]"
	if acct["discoverable"]==False:
		discoverable="[vis:no ]"
	elif acct["discoverable"]==None:
		discoverable="[vis:?  ]"
	bot="[bot:no ]"
	if acct["bot"]:
		bot="[bot:yes]"
	body=[
				"("+("/".join([x+":"+str(acct[x+"_count"]) for x in ["following", "followers", "statuses"]]))+")",
				"",
				"Bio:",
				processContents(acct["note"])
	]
	if acct["fields"]:
		body.extend(["", "Fields:"]+[x["name"]+":\t"+x["value"] for x in acct["fields"]])	
	ret=[fillInDomain(acct["acct"]), acct["display_name"], locked+discoverable+bot, body, str(acct["created_at"]), False, True]
	return [acct["id"], ret]

def drawSelectionMenuItem(i, selected, username, displayName, cw, content, date, seen, isCWOpen):
	drawMsgPanel(i, username, cw, content, date, seen)
	if selected:
		drawSelectedMsg(username, displayName, cw, content, isCWOpen)
def selectMatches(l):
	return []

###################### COMMAND SYSTEM
commandKeys={
	"q":"quit", 
	"P":"prev", "N":"next", "p":"prev_unread", "n":"next_unread", 
	"KEY_PPAGE":"prev_page", "KEY_NPAGE":"next_page",
	"O":"last_unread",
	"T":"top", "F":"fetch", 
	"0":"skipto 0", "1":"skipto 1", "2":"skipto 2", "3":"skipto 3", "4":"skipto 4", "5":"skipto 5", "6":"skipto 6", "7":"skipto 7", "8":"skipto 8", "9":"skipto 9",
	"g":"pager",
	"c":"compose", "r":"reply",
	"b":"boost", "f":"favourite",
	"u":"mark_unread",
	"t":"expand_thread",
	"o":"toggle_cw",
	"j":"set_timeline",
	"/":"search",
	"E":"expand_notes",
	":":"cmd"}
def execCommand(cmd):
	global hlIdx, tlIdx, tl, currentTimeline, isCWOpen, seen_toots, tootbase, tb_dirty
	tootsPerPage=int((ROWS-4)/4)
	if cmd=="quit":
		saveBase()
		teardownCurses()
		sys.exit()
	elif cmd=="prev": hlIdx-=1
	elif cmd=="next": hlIdx+=1
	elif cmd=="prev_unread":
		while hlIdx+tlIdx>0 and gTid(tl[hlIdx+tlIdx]) in seen_toots: hlIdx-=1
	elif cmd=="next_unread":
		while hlIdx+tlIdx<len(tl) and gTid(tl[hlIdx+tlIdx]) in seen_toots: hlIdx+=1
	elif cmd=="next_page":
		tlIdx+=tootsPerPage
	elif cmd=="prev_page":
		tlIdx-=tootsPerPage
	elif cmd=="top": (tlIdx, hlIdx)=[0]*2
	elif cmd.find("skipto ")==0:
		try: hlIdx=int(cmd.split()[1])
		except: pass
	elif cmd=="fetch":
		try: tl=getTimeline(verbose=True, since_id=gTid(tl[0]))+tl
		except: tl=getTimeline()+tl
	elif cmd=="compose":
		length=0
		cw=queryForInput("CW (blank for none):")
		if len(cw.strip())==0: cw=None
		else: length=len(cw.strip())
		msg=queryForInput("Toot content (blank for cancel):")
		if msg:
			length+=len(msg)
			try:
				posted=mastodon.status_post(msg, spoiler_text=cw)
				seen_toots.append(gTid(posted))
				tl.insert(tlIdx+hlIdx, ensureCached(posted))
			except Exception as e: statusMsg("Error in posting your "+str(length)+"-character message: "+str(e))
	elif cmd=="reply":
		msg=tl[tlIdx+hlIdx]
		(cw, tid, author)=(msg["spoiler_text"], gTid(msg), fillInDomain(msg["account"]["acct"]))
		mentions=[author]
		for item in tl[tlIdx+hlIdx]["mentions"]:
			name=fillInDomain(item["acct"])
			if not name in mentions: mentions.append(name)
		if len(cw.strip())==0: cw=None
		msg=queryForInput("Toot content (blank for cancel):")
		if msg:
			msg="@"+" @".join(mentions).strip()+"\n"+msg
			try:
				posted=mastodon.status_post(msg, in_reply_to_id=tid, spoiler_text=cw, visibility=tootbase[tid]["visibility"])
				seen_toots.append(gTid(posted))
				tl.insert(tlIdx+hlIdx, ensureCached(posted))
			except Exception as e: statusMsg("Error in posting your "+str(len(msg))+"-character reply: "+str(e))
	elif cmd=="boost":
		tid=gTid(tl[tlIdx+hlIdx])
		try: mastodon.status_reblog(tid)
		except Exception as e: statusMsg(str(e))
	elif cmd=="favourite":
		tid=gTid(tl[tlIdx+hlIdx])
		try: mastodon.status_favourite(tid)
		except Exception as e: statusMsg(str(e))
	elif cmd=="follow":
		msg=queryForInput("Search for a user (blank for cancel):")
		msg=msg.strip()
		if len(msg)>0:
			matches=None
			try:
				matches=mastodon.account_search(msg)
			except Exception as e: statusMsg(str(e))
			if None!=matches:
				if len(matches)==0:
					statusMsg("No matches found for :"+msg)
				else:
					clean_matches=[ensureCachedAcct(x) for x in matches if not x["moved_to_account"]]
					prettyMatches=[prettyProfile(x) for x in clean_matches]
					selected=selectMatches(prettyMatches)
					if len(selected)>0:
						for acct in selected:
							try:
								mastodon_follow(acct)
							except Exception as e: statusMsg(str(e))
	elif cmd=="mark_unread":
		tid=gTid(tl[tlIdx+hlIdx])
		if tid in seen_toots:
			seen_toots.remove(tid)
			hlIdx+=1
	elif cmd=="expand_thread":
		tid=gTid(tl[tlIdx+hlIdx])
		toots=expandThread(tid)
		tl=toots+tl
		tlIdx+=len(toots)-1
	elif cmd=="expand_notes":
		notes=getTimeline("notifications", verbose=True)
		(tl, tlIdx, hlIdx) = ([], 0, 0)
		tl=expandThreads(list(map(lambda x: gTid(x), notes)))
	elif cmd=="toggle_cw": isCWOpen=not isCWOpen
	elif cmd=="set_timeline":
		msg=queryForInput("Timeline name (blank for cancel, separate multiple timelines with spaces):")
		if len(msg.strip())>0: currentTimeline=msg.strip()
	elif cmd=="cmd":
		msg=queryForInput("Command:")
		if len(msg.strip())>0: execCommand(msg.strip())
	elif cmd.find("search_r ")==0:
		msg=""
		if len(cmd.split())>1: msg=cmd.split()[1]
		tids=map(lambda x: int(x), list(tootbase.keys()))
		tids.sort()
		tids.reverse()
		tids=map(lambda x: str(x), tids)
		try:
			matcher=re.compile(msg)
			search=matcher.search
		except:
			def search(string):
				if string.find(msg): return True
				else:                return None
		toots=[]
		for tid in tids:
			if msg!="" and "spoiler_text" in tootbase[tid] and tootbase[tid]["spoiler_text"]:
				if search(tootbase[tid]["spoiler_text"])!=None: toots.append(tootbase[tid])
			if msg=="" or search(tootbase[tid]["content"])!=None: toots.append(tootbase[tid])
		tl=toots
		(tlIdx, hlIdx)=[0]*2
	elif cmd=="search":
		msg=queryForInput("Search query:")
		if len(msg.strip())>0:
			execCommand("search_r "+(msg.strip()))
	elif cmd=="last_unread":
		execCommand("search_r ")
		tlIdx=len(tl)-1
		while gTid(tl[tlIdx]) in seen_toots and tlIdx>0: tlIdx-=1
		hlIdx=int((ROWS-4)/4)-1
		tlIdx-=hlIdx
	elif cmd=="pager":
		pager=os.getenv("PAGER", os.getenv("VISUAL", os.getenv("EDITOR", "less")))
		browser=os.getenv("BROWSER", "")
		teardownCurses()
		if browser!="":
			attach=""
			if "media_attachments" in tl[tlIdx+hlIdx]:
				for attachment in tl[tlIdx+hlIdx]["media_attachments"]:
					t="embed"
					if attachment["type"]=="image": t="img"
					attach+="<br><"+t+' src="'+attachment["url"]+'">'
			subprocessRun(browser, "<html><body>"+tl[tlIdx+hlIdx]["content"]+attach+"</body></html>")
		else:
			subprocessRun(pager, processContents(tl[tlIdx+hlIdx]["content"]))
		setupCurses()
	elif cmd.find("open_tid ")==0:
		try:
			tid=cmd.split()[1].strip()
			tl=[ensureCached(tid)]+tl
			(tlIdx, hlIdx)=[0]*2
		except Exception as e: statusMsg(str(e))
	elif cmd=="import_history":
		(tlIdx, hlIdx) = [0]*2
		drawPanelContents(tl, hlIdx)
		tl=importHistory(verbose=True)
	if hlIdx+tlIdx<0:(hlIdx, tlIdx)=[0]*2
	position=hlIdx+tlIdx
	if(position>=len(tl) and position<len(tootbase.keys())):
		tids=map(lambda x: gTid(x), tl)
		maxAdded=100
		i=0
		for item in tootbase:
			if i>maxAdded: continue
			if not item in tids:
				tl.append(tootbase[item])
				i+=1
	if(position>0):
		hlIdx=position%tootsPerPage
		tlIdx=tootsPerPage*int(position/tootsPerPage)
	if(hlIdx+tlIdx>=len(tl)): hlIdx+=((hlIdx+tlIdx)-len(tl))


######################### MASTODON & CACHE HANDLING
def getTimeline(which=None, **kw_args):
	if not which: which=currentTimeline
	if which=="all": which="notifications home local public"
	tl=[]
	if which.find(" ")>=0:
		for item in which.split(): tl.extend(getTimeline(item, **kw_args))
		return tl
	verbose=kw_args.get("verbose", False)
	getAll=kw_args.get("getAll", False)
	for opt in ["verbose", "getAll"]:
		if opt in kw_args:
			del kw_args[opt]
	if which.find("_all")>0:
		getAll=True
		which=which.split("_")[0]
	conditionalStatusMsg(which, verbose, False, prefix="Getting your", suffix="timeline. This might take a little while.")
	if(which=="notifications"):
		tl=mastodon.notifications()
	elif which=="statuses":
		tl=mastodon.account_statuses(myAccountId)
	elif which in ["favorites", "favourites"]:
		tl=mastodon.favourites()
	else: tl=mastodon.timeline(timeline=which, **kw_args)
	if getAll:
		tl=allPages(tl, verbose)
	if(which=="notifications"):
		tl=getMentions(tl)
	tl=ensureCached(tl)
	saveBase()
	return tl

def expandThreads(tids, verbose=False):
	conditionalStatusMsg(str(len(tids)), verbose, False, prefix="Expanding", suffix="threads...")
	ret=[]
	for tid in tids:
		ret+=expandThread(tid, verbose)
	return ret

def expandThread(tid, verbose=False):
	conditionalStatusMsg("Expanding thread...", verbose, False)
	ensureCached(tid)
	if not tid in tootbase:
		conditionalStatusMsg("Could not fetch message ID", verbose, False, suffix=str(tid))
		return []
	tid2=tid
	while tid2 in tootbase and tootbase[tid]["in_reply_to_id"]!=None:
		conditionalStatusMsg("Expanding thread... ID:", verbose, False, suffix=str(tid))
		tid2=tootbase[tid]["in_reply_to_id"]
		ensureCached(tid2)
		if tid2 in tootbase:
			tid=tid2
	toots=[ensureCached(tid)]
	toots.extend(ensureCached(mastodon.status_context(tid)["descendants"], True))
	saveBase()
	return toots

def importHistory(src="all", verbose=False):
	if type(src)!=list:
		src=src.split()
	if len(src)>1:
		ret=[]
		for s in src:
			ret=importHistory([s], verbose)+ret
			if verbose:
				drawPanelContents(ret, 0)
		return ret
	src=str(src[0])
	if src=="all":
		return importHistory(["statuses", "favorites", "notifications"], verbose)
	toots=getTimeline(src, getAll=True)
	return expandThreads(list(map(lambda x: gTid(x), toots)), True)

def allPages(page, verbose=False, msg=None):
	myMsg="Getting statuses..."
	ret=[]
	pageNum=1
	while None!=page:
		ret+=ensureCached(page)
		pageNum+=1
		conditionalStatusMsg("Getting statuses...", verbose, False, msg, suffix="page "+str(pageNum))
		try: page=mastodon.fetch_next(page)
		except: page=None
	return ret
		
def getMentions(notifications):
	return [x["status"] for x in notifications if x["type"]=="mentions"]

def ensureCachedAcct(acct, verbose=False, ignoreErrors=True, msg=None, force=False):
	dmsg="fetching account ID"
	if type(acct)==str:
		conditionalStatusMsg(dmsg, verbose, (not ignoreErrors), msg, suffix=acct)
		try:
			acct=mastodon.account(acct)
		except Exception as e:
			conditionalErrMsg(dmsg, verbose, (not ignoreErrors), msg, acct, e)
			if ignoreErrors:
				return None
			else:
				raise e
		return ensureCachedAcct(acct, verbose, ignoreErrors, msg, force)
	elif "id" in acct:
		acctid=acct["id"]
		if not acctid in acctbase or force:
			tmp={"id":acctid}
			for item in ["username", "acct", "display_name"]:
				tmp[item]=acct[item]
			acctbase[acctid]=tmp
	return acct

def ensureCached(toot, verbose=False, ignoreErrors=True, msg=None):
	global tootbase, tb_dirty
	dmsg="fetching message ID"
	if None==toot:
		return None
	if type(toot)==list: # list of TIDs or toots
		return stripNulls([ensureCached(x, verbose, ignoreErrors, msg) for x in toot])
	elif type(toot) in [str, unicode]: # TID
		suffix=toot
		if not toot in tootbase:
			conditionalStatusMsg(dmsg, false, verbose, msg, suffix=suffix)
			try:
				status=mastodon.status(toot)
				return ensureCached(status, verbose, ignoreErrors, msg)
			except Exception as e:
				conditionalErrMsg(dmsg, verbose, (not ignoreErrors), msg, toot, e)
				if ignoreErrors:
					return None
				else:
					raise e
	else: #if type(toot)==dict:
		if "reblog" in toot and toot["reblog"]: toot=ensureCached(toot["reblog"])
		if not "id" in toot: return toot
		tid=gTid(toot)
		if tid in seen_toots: return toot
		if not tid in tootbase:
			tmp=copy.deepcopy(toot)
			tmp["account"]=ensureCachedAcct(tmp["account"], verbose, ignoreErrors, msg)
			tootbase[tid]=tmp
			dirty(tid)
		return tootbase[tid]
#	else:
#		statusMsg("Unexpected type of toot: "+str(type(toot)), True)

def gTid(toot):
	if None==toot:
		return None
	if type(toot)==int:
		return str(toot)
	elif type(toot)==list:
		return [gTid(x) for x in toot]
	else:
		return str(toot["id"])

def dirty(tid):
	global tb_dirty
	tb_dirty[int(tid[-2:])]=True

def stripNulls(l):
	return [x for x in l if None!=x]

def saveBase():
	statusMsg("Saving tootbase...", False)
	global tootbase, acctbase, seen_toots, cwrules, tb_dirty
	with open(ferndir+"acctbase.pickle", "wb") as f: pickle.dump(acctbase, f)
	with open(ferndir+"seenbase.pickle", "wb") as f: pickle.dump(seen_toots, f)
	with open(ferndir+"cwrules.tsv", "w") as f:
		for r in cwrules:
			f.write(r+"\t"+cwrules[r]+"\n")
	if True in tb_dirty:
		for i in range(0, 100):
				if tb_dirty[i] or not os.path.exists(ferndir+"tootbase"+str(i)+".pickle"):
					tmp={}
					for tid in tootbase.keys():
						if int(str(tid)[-2:])==i: tmp[tid]=tootbase[tid]
					with open(ferndir+"tootbase"+str(i)+".pickle", "wb") as f:
						pickle.dump(tmp, f)
						tb_dirty[i]=False

def loadBase():
	global tb_dirty
	statusMsg("Loading tootbase...", False)
	global tootbase, acctbase, seen_toots, cwrules
	with open(ferndir+"acctbase.pickle", "rb") as f: acctbase=pickle.load(f)
	with open(ferndir+"seenbase.pickle", "rb") as f:
		seen_toots=pickle.load(f)
		try:
			res=[]
			for item in seen_toots:
				res.append(item.decode(code))
			seen_toots=res
		except: pass
	with open(ferndir+"cwrules.tsv", "r") as f:
		cwrules={}
		for line in f.readlines():
			cwrules[line.split("\t")[0]]=line.split("\t")[1]
	if os.path.exists(ferndir+"tootbase0.pickle"):
		for i in range(0, 100):
			with open(ferndir+"tootbase"+str(i)+".pickle", "rb") as f:
				tmp=pickle.load(f)
				for tid in tmp.keys(): tootbase[tid]=tmp[tid]
				tb_dirty[i]=False
	else:
		with open(ferndir+"tootbase.pickle", "rb") as f:
			tootbase=pickle.load(f)
			tb_dirty=[True]*10
			for i in range(0, 100):
				with open(ferndir+"tootbase"+str(i)+".pickle", "wb") as f: pickle.dump({}, f)
			saveBase()

######################## MAIN
def mainloop():
	global hlIdx, tl, commandKeys, tlIdx, ROWS, COLS
	drawPanelContents(tl[tlIdx:], hlIdx)
	key=scr.getch()
	if key==curses.KEY_RESIZE:
		ROWS, COLS = scr.getmaxyx()
		return
		
	key=curses.keyname(key)
	try: key=key.decode(code)
	except: pass
	if key in commandKeys.keys(): execCommand(commandKeys[key])
	else: statusMsg("Key not handled: "+key)

def main():
	global mastodon, myAccountId, domain, hlIdx, tlIdx, tl, acctbase, tootbase, seen_toots, currentTimeline, isCWOpen, cwrules
	isCWOpen=False
	cwrules={}
	(tlIdx, hlIdx)=[0]*2
	currentTimeline="notifications home"
	if not os.path.exists(ferndir):
		os.mkdir(ferndir)
		registerApplicationHelper()
	instance_url=""
	try:
			with open(ferndir+"instance_url.txt", 'r') as f: instance_url=f.readline().strip()
			mastodon=Mastodon(client_id=ferndir+"clientcred.txt", access_token=ferndir+"usercred.txt", api_base_url=instance_url, ratelimit_method="pace")
			myAccountId=mastodon.account_verify_credentials()["id"]
			try: loadBase()
			except: saveBase()
	except Exception as e:
		statusMsg("Something happened: "+str(e))
		registerApplicationHelper()
		main()
	domain=re.sub("^http.?://", "", re.sub("/$", "", mastodon.instance()["uri"]))
	if len(seen_toots)>0: tl=getTimeline("all", verbose=True, since_id=seen_toots[-1])
	else: tl=getTimeline("all", verbose=True)
	while True:
		try: mainloop()
		except SystemExit as e: break
		except Exception as e:
			statusMsg("Something happened: "+str(e))
			teardownCurses()
			traceback.print_exc()
			raise e
try:
	setupCurses()
	main()
except:
	teardownCurses()
	traceback.print_exc()
teardownCurses()
