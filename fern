#!/usr/bin/env python
# -*- coding: utf-8 -*-

##################### IMPORTS, POLYFILLS, AND SHIMS
import sys
try:
	reload(sys)
	sys.setdefaultencoding('utf8')
except:
	pass

try:
	import cPickle
	pickle=cPickle
except:
	import pickle

import curses, time, os, copy

home=""
try:
	from pathlib import Path
	home=str(Path.home())
except:
	from os.path import expanduser
	home=expanduser("~")
ferndir=home+"/.fern/"

from datetime import datetime
import traceback

import re

import locale
locale.setlocale(locale.LC_ALL, 'en_US.UTF-8')
code = locale.getpreferredencoding()
code="UTF-8"

import codecs

UTF8Writer = codecs.getwriter('utf8')
sys.stdout = UTF8Writer(sys.stdout)

try:
	from html import unescape
except:
	try:
		from HTMLParser import HTMLParser
		unescape=HTMLParser().unescape
	except:
		from html.parser import HTMLParser
		unescape=HTMLParser().unescape


from mastodon import Mastodon

###################### GLOBALS
logo="""
                           
   :##  Ｆｅｄｅｒａｔｅｄ
   #. Ｅｄｉｔｏｒ  ａｎｄ 
   # Ｒｅａｄｅｒ  ｏｆ  Ｎｅｗｓ
 #####   ###    #:##: #:##: 
   #       :#   ##  # #  :#   /.\\
   #    #   #   #     #   #  // \\\\
   #    #####   #     #   #  \\\\///
   #    #       #     #   #   \//
   #        #   #     #   # -=//=-
   #     ###:   #     #   #-=//==-
                            
"""

global scr, ROWS, COLS, seen_toots

ROWS=25
COLS=80

seen_toots=[]
tb_dirty=[False]*10
tootbase={}
acctbase={}

hlcolor=[curses.COLOR_MAGENTA, curses.COLOR_BLACK]
normcolor=[curses.COLOR_WHITE, curses.COLOR_BLACK]
cwcolor=[curses.COLOR_RED, curses.COLOR_BLACK]
textcolor=[curses.COLOR_WHITE, curses.COLOR_BLACK]
menucolor=[curses.COLOR_GREEN, curses.COLOR_BLACK]
seencolor=[curses.COLOR_BLUE, curses.COLOR_BLACK]

hlnum=1
normnum=2
cwnum=3
textnum=4
menunum=5
seennum=6

######################## CURSES HELPERS & WIZARDS
def statusMsg(msg, wait=True):
	query=curses.newwin(4, 80, int(ROWS/2)-5, int(COLS/2)-40)
	query.box()
	query.addstr(1, 1, msg)
	query.overlay(scr)
	scr.refresh()
	query.refresh()
	if wait:
		query.getch()
	del query

def queryForInput(msg, hideEcho=False):
	query=curses.newwin(10, 100, int(ROWS/2)-5, int(COLS/2)-50)
	query.box()
	query.addstr(1, 1, msg)
	query.overlay(scr)
	scr.refresh()
	query.refresh()
	if not hideEcho:
		curses.echo()
	curses.curs_set(1)
	addy=query.getstr(2, 1, 500)
	curses.curs_set(0)
	curses.noecho()
	del query
	scr.refresh()
	try:
		addy=addy.decode(code)
	except:
		pass
	return addy.replace("\\n", "\n")

def registerApplication(instanceURL, email, password):
	clientCredFname=ferndir+"clientcred.txt"
	userCredFname=ferndir+"usercred.txt"
	
	if not (os.path.exists(clientCredFname)):
		Mastodon.create_app("fern", to_file=clientCredFname, api_base_url=instanceURL)
	
	mastodon = Mastodon(client_id=clientCredFname, api_base_url=instanceURL)
	mastodon.log_in(email, password, to_file=userCredFname)
	with open(ferndir+"instance_url.txt", "w") as f:
		f.write(instanceURL)

def registerApplicationHelper():	
	statusMsg("You need to set up Fern to talk to your instance. Press any key to continue.")
	instanceURL=queryForInput("What is the URL of your instance?")
	email=queryForInput("What is your email?")
	password=queryForInput("What is your password?", True)
	try:
		registerApplication(instanceURL, email, password)
	except Exception as e:
		statusMsg("Something went wrong: "+str(e))
		raise e

def setupColor():
	curses.start_color()
	curses.init_pair(*([hlnum]+hlcolor))	 # Highlighted message frame
	curses.init_pair(*([normnum]+normcolor))	 # Normal message frame
	curses.init_pair(*([cwnum]+cwcolor))	 # CW text
	curses.init_pair(*([textnum]+textcolor))	 # Normal text
	curses.init_pair(*([menunum]+menucolor))	 # Menu
	curses.init_pair(*([seennum]+seencolor))	 # Already-seen messages

def drawLogo(xoffset=0, yoffset=0):
    i=0
    for line in logo.split("\n"):
       scr.addstr(int(i+yoffset), int(xoffset), line, curses.color_pair(menunum))
       i+=1
    scr.refresh()

def setupCurses():
	global scr, ROWS, COLS
	scr = curses.initscr()
	setupColor()
	curses.cbreak()
	curses.noecho()
	curses.curs_set(0)
	scr.keypad(1)
	ROWS, COLS = scr.getmaxyx()
	scr.clear()
	drawLogo()

def teardownCurses():
	curses.nocbreak()
	scr.keypad(0)
	curses.echo()
	curses.endwin()

######################### TEXT FORMATTING & PROCESSING HELPERS

def trunc(string, length, affix="...", breakOnWord=False):
	if not string:
		return ""
	if len(string)<length:
		return string
	if length==0:
		return ""
	if len(affix)>length:
		return string[:length]
	if breakOnWord:
		words=string.split()
		for i in range(len(words), 1, -1):
			x=" ".join(words[:i]+[affix])
			if len(x)<length:
				return x
		return trunc(string, length, affix)
	else:
		return string[:length-len(affix)]+affix

def truncWrap(string, length, affix="\n", breakOnWord=True):
	ret=[]
	while len(string)>length:
		ret.append(trunc(string, length, affix, breakOnWord))
		string=string[len(ret[-1])-(len(affix)):]
	return ret+[string]
def truncWrapMulti(strings, length):
	ret=[]
	for string in strings:
		ret.extend(truncWrap(string, length))
		ret.extend("")
	return ret
def firstNonBlankLine(string):
	lines=string.split("\n")
	for line in lines:
		if len(line)>0:
			return line
def centerPad(string, length, padding=" "):
	string=trunc(string, length, breakOnWord=True)
	pad=length-len(string)
	if pad>0 and (pad/2)>0 and ((pad/2)/len(padding))>0:
		padstr=padding*int((pad/2)/len(padding))
		return padstr+string+padstr
	return string

def processContents(string):
	string=string.replace("<p>", "\n").replace("</p>", "\n").replace("<br>", "\n").replace("<br />", "\n").replace("<p />", "\n")
	string=re.sub("<[^>]*>", "", string)
	string=unescape(string)
	return string

def fillInDomain(name):
	if name.find("@")<0:
		return name+"@"+domain
	return name

######################## CODE FOR DRAWING THE TUI

def drawPanels(uid, rows, cols, highlighted=0):
	hlColor=curses.color_pair(hlnum)
	color=curses.color_pair(normnum)
	leftPanelCols=int((cols/8.0)*3)
	rightPanelCols=cols-leftPanelCols
	truncID=trunc(uid, leftPanelCols-3)
	scr.addstr("".join(["+[", truncID, "]", "-"*(leftPanelCols-(3+len(truncID))), "+", "-"*(rightPanelCols-1)]))
	for i in range(0, int((rows-3)/4)):
		if highlighted==i:
			scr.addstr("".join(["#", " "*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
			scr.addstr("".join(["#", " "*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
			scr.addstr("".join(["#", " "*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
			scr.addstr("".join(["#", "="*(leftPanelCols-1), " "*(rightPanelCols)]), hlColor)
		else:
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["|", " "*(leftPanelCols-1), "|", " "*(rightPanelCols-1)]), color)
			scr.addstr("".join(["+", "_"*(leftPanelCols-1), "/", " "*(rightPanelCols-1)]), color)
	if (rows-3)%4>0:
		for i in range(4*int((rows-3)/4), rows-3):
			scr.addstr(" "*cols)
	clopen="[(o)pen_CW]"
	if isCWOpen:
		clopen="[cl(o)se_CW]"
	scr.addstr(centerPad("[(p)rev/(n)ext_unread] [(P)rev/(N)ext_message] [(j)ump to timeline] [(T)op] [(c)ompose] [(q)uit] [(/)_find]", cols).replace("_", " "), curses.color_pair(menunum))
	scr.addstr(centerPad("[(b)oost] [(f)av] [mark_(u)nread] "+clopen+" [(t)hread_view] [(F)etch_new] [(:)_command]", cols).replace("_", " "), curses.color_pair(menunum))
	drawLogo(leftPanelCols+(int(COLS-leftPanelCols)/2), int(ROWS/2))

def drawMsgPanel(idx, user, cw, msg, date, seen=False):
	panelstart=(idx*4)+1
	if panelstart+4 > ROWS-2:
		return
	panelwidth=int((COLS/8.0)*3)-1
	mcol=curses.color_pair(menunum)
	tcol=curses.color_pair(textnum)
	if(seen):
		mcol=curses.color_pair(seennum)
		tcol=curses.color_pair(seennum)
	scr.addstr(panelstart, 1, trunc(user, panelwidth), mcol)
	if not cw:
		scr.addstr(panelstart+1, 2, trunc(firstNonBlankLine(msg), panelwidth-2), tcol)
	else:
		scr.addstr(panelstart+1, 2, trunc(cw, panelwidth-2), curses.color_pair(cwnum))
	scr.addstr(panelstart+2, 2, trunc(date, panelwidth-2), mcol)

def drawSelectedMsg(user, displayname, cw, msg, cwopen=False):
	panelstart=int((COLS/8.0)*3)+3
	panelwidth=COLS-panelstart-1
	msg=truncWrapMulti(msg.split("\n"), panelwidth)
	scr.addstr(1, panelstart, trunc(displayname, panelwidth), curses.color_pair(menunum))
	scr.addstr(2, panelstart, "("+trunc(user, panelwidth-2)+")", curses.color_pair(menunum))
	if not cw:
		i=3
		for line in msg:
			if i>ROWS:
				return
			scr.addstr(i, panelstart, line, curses.color_pair(textnum))
			i+=1
	else:
		i=3
		for line in truncWrap("CW: "+cw, panelwidth):
			if i>ROWS:
				return
			scr.addstr(i, panelstart, line, curses.color_pair(cwnum))
			i+=1
		if cwopen:
			for line in msg:
				if i>ROWS:
					return
				scr.addstr(i, panelstart, line, curses.color_pair(textnum))
				i+=1

def drawPanelContents(toots, selectedIdx, skipSeen=False):	
	global isCWOpen
	scr.clear()
	drawPanels(fillInDomain(mastodon.account_verify_credentials()["acct"]), ROWS, COLS, selectedIdx)
	i=0
	for toot in toots:
		if(i>(ROWS-3)/4):
			continue
		if "reblog" in toot and toot["reblog"]:
			if type(toot["reblog"])==type(toot):
				toot=toot["reblog"]
		if "muted" in toot:
			next
		if not "id" in toot:
			next
		if not toot["id"] in tootbase:
			tootbase[toot["id"]]=copy.deepcopy(toot)
		seen=(toot["id"] in seen_toots)
		if skipSeen and seen:
			next
		acct=toot["account"]
		username=fillInDomain(acct["acct"])
		cw=toot["spoiler_text"]
		if not cw:
			cw=None
		content=processContents(toot["content"])
		drawMsgPanel(i, username, cw, content, str(toot["created_at"]), seen)
		if i==selectedIdx:
			if not seen:
				seen_toots.append(toot["id"])
			if "media_attachments" in toot:
				for attachment in toot["media_attachments"]:
					content+="\n"+attachment["url"]
			flags=""
			if "in_reply_to_id" in toot and toot["in_reply_to_id"]:
				flags+="["+str(toot["in_reply_to_id"])+"<-]"
			if toot["reblogged"]:
				flags+="[b]"
			if toot["favourited"]:
				flags+="[f]"
			if toot["sensitive"]:
				flags+="[sensitive]"
			if "visibility" in toot:
				flags+="["+toot["visibility"]+"]"
			if "mentions" in toot and toot["mentions"]:
				if len(flags)>0:
					flags+="\n"
				flags+="TO: "
				for mention in toot["mentions"]:
					flags+=fillInDomain(mention["acct"])+" "
				flags+="\n"
			content=flags+content
			if "tags" in toot and toot["tags"]:
				tags=[]
				for tag in toot["tags"]:
					tags.append(tag["name"])
				content+="\n\nTAGS: "+(" ".join(tags))
			drawSelectedMsg(username, acct["display_name"], cw, content, isCWOpen)
		i+=1
	scr.refresh()

###################### COMMAND SYSTEM
commandKeys={
	"q":"quit", 
	"P":"prev", "N":"next", "p":"prev_unread", "n":"next_unread", 
	"T":"top", "F":"fetch", 
	"0":"skipto 0", "1":"skipto 1", "2":"skipto 2", "3":"skipto 3", "4":"skipto 4", "5":"skipto 5", "6":"skipto 6", "7":"skipto 7", "8":"skipto 8", "9":"skipto 9",
	"c":"compose", "r":"reply",
	"b":"boost", "f":"favourite",
	"u":"mark_unread",
	"t":"expand_thread",
	"o":"toggle_cw",
	"j":"set_timeline",
	"/":"search",
  ":":"cmd"}
def execCommand(cmd):
	global hlIdx, tlIdx, tl, currentTimeline, isCWOpen, seen_toots, tootbase, tb_dirty
	if cmd=="quit":
		saveBase()
		teardownCurses()
		sys.exit()
	elif cmd=="prev":
		hlIdx-=1
	elif cmd=="next":
		hlIdx+=1
	elif cmd=="prev_unread":
		while hlIdx+tlIdx>0 and tl[hlIdx+tlIdx]["id"] in seen_toots:
			hlIdx-=1
	elif cmd=="next_unread":
		while hlIdx+tlIdx<len(tl) and tl[hlIdx+tlIdx]["id"] in seen_toots:
			hlIdx+=1
	elif cmd=="top":
		tlIdx=0
		hlIdx=0
	elif cmd.find("skipto ")==0:
		try:
			hlIdx=int(cmd.split()[1])
		except: pass
	elif cmd=="fetch":
		try:
			tl=getTimeline(since_id=tl[0]["id"])+tl
		except:
			tl=getTimeline()+tl
	elif cmd=="compose":
		length=0
		cw=queryForInput("CW (blank for none):")
		if len(cw.strip())==0:
			cw=None
		else: length=len(cw.strip())
		msg=queryForInput("Toot content (blank for cancel):")
		if msg:
			length+=len(msg)
			try:
				posted=mastodon.status_post(msg, spoiler_text=cw)
				seen_toots.append(posted["id"])
				tootbase[posted["id"]]=posted
				tb_dirty[int(str(posted["id"])[0])]=True
			except Exception as e:
				statusMsg("Error in posting your "+str(length)+"-character message: "+str(e))
	elif cmd=="reply":
		cw=tl[tlIdx+hlIdx]["spoiler_text"]
		tid=tl[tlIdx+hlIdx]["id"]
		author=fillInDomain(tl[tlIdx+hlIdx]["account"]["acct"])
		mentions=[author]
		for item in tl[tlIdx+hlIdx]["mentions"]:
			name=fillInDomain(item["acct"])
			if not name in mentions:
				mentions.append(name)
		if len(cw.strip())==0:
			cw=None
		msg=queryForInput("Toot content (blank for cancel):")
		if msg:
			msg="@"+" @".join(mentions).strip()+"\n"+msg
			try:
				posted=mastodon.status_post(msg, in_reply_to_id=tid, spoiler_text=cw)
				seen_toots.append(posted["id"])
				tootbase[posted["id"]]=posted
				tb_dirty[int(str(posted["id"])[0])]=True
			except Exception as e:
				statusMsg("Error in posting your "+str(len(msg))+"-character reply: "+str(e))
	elif cmd=="boost":
		tid=tl[tlIdx+hlIdx]["id"]
		try:
			mastodon.status_reblog(tid)
		except Exception as e:
			statusMsg(str(e))
	elif cmd=="favourite":
		tid=tl[tlIdx+hlIdx]["id"]
		try:
			mastodon.status_favourite(tid)
		except Exception as e:
			statusMsg(str(e))
	elif cmd=="mark_unread":
		tid=tl[tlIdx+hlIdx]["id"]
		if tid in seen_toots:
			seen_toots.remove(tid)
			hlIdx+=1
	elif cmd=="expand_thread":
		statusMsg("Expanding thread...", False)
		tid=tl[tlIdx+hlIdx]["id"]
		if not tid in tootbase:
			tootbase[tid]=copy.deepcopy(tl[tlIdx+hlIdx])
		while tootbase[tid]["in_reply_to_id"]!=None:
			statusMsg("Expanding thread... (ID "+str(tid)+")", False)
			tid=tootbase[tid]["in_reply_to_id"]
			if not tid in tootbase:
				tootbase[tid]=copy.deepcopy(mastodon.status(tid))
		toots=[tootbase[tid]]
		for item in mastodon.status_context(tid)["descendants"]:
			statusMsg("Expanding thread... (ID "+str(item["id"])+")", False)
			if not item["id"] in tootbase:
				tootbase[item["id"]]=copy.deepcopy(item)
			toots.append(tootbase[item["id"]])
		saveBase()
		tl=toots+tl
		tlIdx+=len(toots)-1
	elif cmd=="toggle_cw":
		isCWOpen=not isCWOpen
	elif cmd=="set_timeline":
		msg=queryForInput("Timeline name (blank for cancel, separate multiple timelines with spaces):")
		if len(msg.strip())>0:
			currentTimeline=msg.strip()
	elif cmd=="cmd":
		msg=queryForInput("Command:")
		if len(msg.strip())>0:
			execCommand(msg.strip())
	elif cmd=="search":
		msg=queryForInput("Search query:")
		if len(msg.strip())>0:
			tids=tootbase.keys()
			tids.sort()
			tids.reverse()
			try:
				matcher=re.compile(msg)
				search=matcher.search
			except:
				def search(string):
					if string.find(msg):
						return True
					else:
						return None
			toots=[]
			for tid in tids:
				if "spoiler_text" in tootbase[tid] and tootbase[tid]["spoiler_text"]:
					if search(tootbase[tid]["spoiler_text"])!=None:
						toots.append(tootbase[tid])
				if search(tootbase[tid]["content"])!=None:
					toots.append(tootbase[tid])
			tl=toots
			tlIdx=0
			hlIdx=0

	if hlIdx+tlIdx<0:
		hlIdx=0
		tlIdx=0
	elif hlIdx<0:
		tlIdx-=hlIdx
		hlIdx=0
	if(hlIdx+tlIdx>=len(tl)):
		hlIdx=len(tl)-1
	if hlIdx>=(ROWS-3)/4:
		tlIdx+=int((ROWS-4)/4)
		hlIdx=0
	if tlIdx>=len(tl):
		tids=map(lambda x: x["id"], tl)
		maxAdded=100
		i=0
		for item in tootbase:
			if i>maxAdded:
				continue
			if not item in tids:
				tl.append(tootbase[item])
				i+=1

######################### MASTODON & CACHE HANDLING
def getTimeline(which=None, **kw_args):
	global tootbase, acctbase, currentTimeline, tb_dirty
	if not which:
		which=currentTimeline
	if which=="all":
		which="notifications home local public"
	if which.find(" ")>=0:
		tl=[]
		for item in which.split():
			tl.extend(getTimeline(item, **kw_args))
		return tl
	statusMsg("Getting your "+which+" timeline. This might take a little while.", False)
	tl=[]
	tl2=[]
	if(which=="notifications"):
		notes=mastodon.notifications()
		for note in notes:
			if note["type"]=="mention":
				tl2.append(note["status"])
	else:
		tl2=mastodon.timeline(timeline=which, **kw_args)
	i=0
	for toot in tl2:
		if toot["reblog"]:
			toot=toot["reblog"]
		try:
			if not "id" in toot:
				next
			tid=toot["id"]
			if tid in seen_toots:
				next
			statusMsg("Getting your "+which+" timeline, toot "+tid+" ("+str(i)+"/"+str(limit)+")", False)
			if not tid in tootbase:
                                tb_dirty[int(tid[0])]=True
				acct=toot["account"]
				if "id" in acct:
					acctid=acct["id"]
					if not acctid in acctbase:
						statusMsg("Getting your "+which+" timeline, toot "+tid+" [account] ("+str(i)+"/"+str(limit)+")", False)
						tmp={"id":acctid}
						for item in ["username", "acct", "display_name"]:
							statusMsg("Getting your "+which+" timeline, toot "+tid+" [account."+item+"] ("+str(i)+"/"+str(limit)+")", False)
							tmp[item]=acct[item]
						acctbase[acctid]=tmp
						acct=tmp
					tmp={"account":acctbase[acctid], "id":tid}
				else:
					tmp={"account":acct, "id":tid}
				tmp["id"]=tid
				#for item in ["in_reply_to_id", "content", "created_at", "spoiler_text", "reblogged", "favourited", "sensitive", "muted", "media_attachments", "visibility"]:
				for item in toot:
					statusMsg("Getting your "+which+" timeline, toot "+tid+" ["+item+"] ("+str(i)+"/"+str(limit)+")", False)
					if item in toot:
						tmp[item]=toot[item]
				tootbase[tid]=tmp
			tl.append(tootbase[tid])
			i+=1
		except:
			try:
				tl.append(copy.deepcopy(toot))
				tl[-1]["id"]=toot["id"]
			except:
				try:
					tl.append(copy.copy(toot))
					tl[-1]["id"]=toot["id"]
				except:
					tl.append(toot)
	saveBase()
	return tl

def saveBase():
	statusMsg("Saving tootbase...", False)
	global tootbase, acctbase, seen_toots, tb_dirty
	if True in tb_dirty:
		for i in range(0, 10):
		    if tb_dirty[i]:
			    tmp={}
			    for tid in tootbase.keys():
				if int(str(tid)[0])==i:
					tmp[tid]=tootbase[tid]
			    with open(ferndir+"tootbase"+str(i)+".pickle", "wb") as f:
				pickle.dump(tmp, f)
				tb_dirty[i]=False
		with open(ferndir+"acctbase.pickle", "wb") as f:
			pickle.dump(acctbase, f)
	with open(ferndir+"seenbase.pickle", "wb") as f:
		pickle.dump(seen_toots, f)

def loadBase():
	global tb_dirty
	statusMsg("Loading tootbase...", False)
	global tootbase, acctbase, seen_toots
	if os.path.exists(ferndir+"tootbase0.pickle"):
		for i in range(0, 10):
			with open(ferndir+"tootbase"+str(i)+".pickle", "rb") as f:
				tmp=pickle.load(f)
				for tid in tmp.keys():
					tootbase[tid]=tmp[tid]
				tb_dirty[i]=False
	else:
		with open(ferndir+"tootbase.pickle", "rb") as f:
			tootbase=pickle.load(f)
			tb_dirty=[False]*10
	with open(ferndir+"acctbase.pickle", "rb") as f:
		acctbase=pickle.load(f)
	with open(ferndir+"seenbase.pickle", "rb") as f:
		seen_toots=pickle.load(f)
		try:
			res=[]
			for item in seen_toots:
				res.append(item.decode(code))
			seen_toots=res
		except:
			pass

######################## MAIN
def mainloop():
	global hlIdx, tl, commandKeys, tlIdx, ROWS, COLS
	drawPanelContents(tl[tlIdx:], hlIdx)
	key=scr.getch()
	if key==curses.KEY_RESIZE:
		ROWS, COLS = scr.getmaxyx()
		return
		
	key=curses.keyname(key)
	try:
		key=key.decode(code)
	except:
		pass
	if key in commandKeys.keys():
		execCommand(commandKeys[key])
	else:
		statusMsg("Key not handled: "+key)

def main():
	global mastodon, domain, hlIdx, tlIdx, tl, acctbase, tootbase, seen_toots, currentTimeline, isCWOpen
	isCWOpen=False
	tlIdx=0
	hlIdx=0
	currentTimeline="notifications home"
	if not os.path.exists(ferndir):
		os.mkdir(ferndir)
		registerApplicationHelper()
	instance_url=""
	try:
			with open(ferndir+"instance_url.txt", 'r') as f:
				instance_url=f.readline().strip()
			mastodon=Mastodon(client_id=ferndir+"clientcred.txt", access_token=ferndir+"usercred.txt", api_base_url=instance_url, ratelimit_method="pace")
			try:
				loadBase()
			except:
				saveBase()
	except Exception as e:
		statusMsg("Something happened: "+str(e))
		registerApplicationHelper()
		main()
	domain=re.sub("^http.?://", "", re.sub("/$", "", mastodon.instance()["uri"]))
	if len(seen_toots)>0:
		tl=getTimeline("all", since_id=seen_toots[-1])
	else:
		tl=getTimeline("all")
	while True:
		try:
			mainloop()
		except Exception as e:
			statusMsg("Something happened: "+str(e))
			teardownCurses()
			traceback.print_exc()
			raise e
try:
	setupCurses()
	main()
except:
	teardownCurses()
	traceback.print_exc()
teardownCurses()
